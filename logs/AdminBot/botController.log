 * Serving Flask app "botController" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 742-439-305
 * Running on http://127.0.0.1:2000/ (Press CTRL+C to quit)
127.0.0.1 - - [17/Dec/2020 18:39:45] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
127.0.0.1 - - [17/Dec/2020 18:39:56] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
127.0.0.1 - - [17/Dec/2020 18:41:22] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
127.0.0.1 - - [17/Dec/2020 18:41:29] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
127.0.0.1 - - [17/Dec/2020 18:42:33] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
127.0.0.1 - - [17/Dec/2020 18:42:45] "[37mPOST /api/botController/ HTTP/1.1[0m" 200 -
debug line from deleteSession - session =  []
debug line from deleteSession - sesVariables =  []
debug line from deleteSession - session =  []
debug line from deleteSession - sesVariables =  []
debug line from deleteSession - session =  []
debug line from deleteSession - sesVariables =  []
exStr =  Block.foo = lambda self: requests.get(url="http://127.0.0.1:2030/adminapi/listbots", params={"dummy": "dummy"})
debug line from getInput - out =  [{'botName': 'HotelBooking'}]
debug line from setVariables - updDict =  {'sessionId': '5bfea378-4069-11eb-a6f5-e4a7a0b3b6c6', 'userId': 'U01CYH277PD', 'journeyName': 'botDeploy', 'blockName': 'get_bot', 'sessionVariables': [{'botName': 'HotelBooking', 'scope': 'global'}]}
debug line from upsertSesVariables - sesVariables =  [{'sessionId': '5bfea378-4069-11eb-a6f5-e4a7a0b3b6c6', 'userId': 'U01CYH277PD', 'journeyName': 'botDeploy', 'blockName': 'get_bot', 'sessionVariables': [{'botName': 'HotelBooking', 'scope': 'global'}]}]
debug line from getVariables - res =  [{'botName': 'HotelBooking'}]
Debug line from resolveVariables - b = botName 
match =  HotelBooking
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'process': 'modelTrain/intents/trainIntents.py'}
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'process': 'modelTrain/intents/trainIntents.py'}
exStr =  Block.foo = lambda self: requests.post(url="http://127.0.0.1:2030/adminapi/botstart", json={"botName": "HotelBooking", "process": "modelTrain/intents/trainIntents.py"})
debug line from getVariables - res =  [{'botName': 'HotelBooking'}]
debug line from getInput - out =  [{'selection': 'TKinter'}]
Debug line from resolveVariables - b = botName 
match =  HotelBooking
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'deploy': {'channel': 'TKinter', 'botControllerPort': '3000', 'intentControllerPort': '3005'}}
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'deploy': {'channel': 'TKinter', 'botControllerPort': '3000', 'intentControllerPort': '3005'}}
exStr =  Block.foo = lambda self: requests.post(url="http://127.0.0.1:2030/adminapi/botHeader/", json={"botName": "HotelBooking", "deploy": {"channel": "TKinter", "botControllerPort": "3000", "intentControllerPort": "3005"}})
debug line from getVariables - res =  [{'botName': 'HotelBooking'}]
Debug line from resolveVariables - b = botName 
match =  HotelBooking
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'process': 'botstart.py'}
Debug line from resolveVariables - out =  {'botName': 'HotelBooking', 'process': 'botstart.py'}
exStr =  Block.foo = lambda self: requests.post(url="http://127.0.0.1:2030/adminapi/botstart", json={"botName": "HotelBooking", "process": "botstart.py"})
